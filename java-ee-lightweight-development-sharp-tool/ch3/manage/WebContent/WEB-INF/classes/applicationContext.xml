<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:aop="http://www.springframework.org/schema/aop" 
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:cache="http://www.springframework.org/schema/cache"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
	http://www.springframework.org/schema/tx  
	http://www.springframework.org/schema/tx/spring-tx-3.0.xsd  
	http://www.springframework.org/schema/aop  
	http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
    http://www.springframework.org/schema/cache
    http://www.springframework.org/schema/cache/spring-cache-3.2.xsd
        ">
    
    

 <import resource="classpath:spring-ehcache.xml"/>  

	<bean
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations" value="classpath:MySQL.properties" />
	</bean>
	
	
	
	
	
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
		<property name="driverClassName" value="${driverClassName}">
		</property>
		<property name="url" value="${url}">
		</property>
		<property name="username" value="${username}"></property>
		<property name="password" value="${password}"></property>
		<!-- 连接池启动时的初始值 -->
		<property name="initialSize" value="${initialSize}"></property>
		<!-- 连接池的最大值 -->
		<property name="maxActive" value="${maxActive}"></property>
		<!-- 最大空间值、当经过一个高峰时间后，连接池可以慢慢将已经用不到的连接慢慢释放一部分，直至减少的maxIdle为止 -->
		<property name="maxIdle" value="${maxIdle}"></property>
		<!-- 最小空间值，当空间的连接数少于阀值时，连接池就会预申请一些连接，以免洪峰来时 来不及申请 -->
		<property name="minIdle" value="${minIdle}"></property>
	</bean>
	
	
	

	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate"
		autowire="default">
		<property name="dataSource">
			<ref local="dataSource" />
		</property>
	</bean>

	<!-- 配置一个NamedParameterJdbcTemplate模板 使用构造函数注入器 -->
	<bean id="namedjdbcTemplate"
		class="org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate">
		<constructor-arg ref="dataSource" />
	</bean>


	<!-- 声明使用注解式事务 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	<!-- 对标注@Transaction注解的Bean进行事务管理 -->
	<!--<tx:annotation-driven transaction-manager="transactionManager"/> -->
	<!-- 定义事务通知 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<!-- 定义方法的过滤规则 -->
		<tx:attributes>
			<!-- 所有方法都使用事务 -->
			<tx:method name="*" propagation="REQUIRED" />
			<!-- 定义所有get开头的方法都是只读的 -->
			<tx:method name="find*" read-only="true" />
		</tx:attributes>
	</tx:advice>

	<!-- 定义AOP配置 -->
	<aop:config>
		<!-- 定义一个切入点 -->
		<aop:pointcut
			expression="execution (* com.manage.platform.service.impl..*.*(..))"
			id="services" />
		<!-- 对切入点和事务的通知，进行适配 -->
		<aop:advisor advice-ref="txAdvice" pointcut-ref="services" />
	</aop:config>


	<bean id="throwsAdvice" class="com.manage.platform.exception.ExceptionDispose" />
	<aop:config proxy-target-class="true">
		<aop:pointcut expression="execution(* com.manage.platform..*.*(..))"
			id="exPoint" />
		<aop:advisor advice-ref="throwsAdvice" pointcut-ref="exPoint" />
	</aop:config>

	<!-- 人员角色关系 -->
	<bean id="MANAGE_USER_ROLEDAO" class="com.manage.platform.dao.impl.MANAGE_USER_ROLEDaoImpl">
		<property name="namedjdbcTemplate" ref="namedjdbcTemplate"></property>
	</bean>
	<bean id="MANAGE_USER_ROLEService"
		class="com.manage.platform.service.impl.MANAGE_USER_ROLEServiceImpl">
		<property name="manage_USER_ROLEdao" ref="MANAGE_USER_ROLEDAO"></property>
	</bean>
	<bean id="MANAGE_USER_ROLEAction" class="com.manage.platform.action.MANAGE_USER_ROLEAction">
		<property name="imanage_USER_ROLEservice" ref="MANAGE_USER_ROLEService"></property>
		<property name="imanage_roleservice" ref="MANAGE_ROLEService"></property>
	</bean>

	<!-- 权限 -->
	<bean id="MANAGE_PERMISSIONDAO" class="com.manage.platform.dao.impl.MANAGE_PERMISSIONDaoImpl">
		<property name="namedjdbcTemplate" ref="namedjdbcTemplate"></property>
	</bean>
	<bean id="MANAGE_PERMISSIONService"
		class="com.manage.platform.service.impl.MANAGE_PERMISSIONServiceImpl">
		<property name="manage_PERMISSIONdao" ref="MANAGE_PERMISSIONDAO"></property>
	</bean>
	<bean id="MANAGE_PERMISSIONAction" class="com.manage.platform.action.MANAGE_PERMISSIONAction">
		<property name="imanage_PERMISSIONservice" ref="MANAGE_PERMISSIONService"></property>
		<property name="imanage_modelservice" ref="MANAGE_MODELService"></property>
	</bean>

	<!-- 角色 -->
	<bean id="MANAGE_ROLEDAO" class="com.manage.platform.dao.impl.MANAGE_ROLEDaoImpl">
		<property name="namedjdbcTemplate" ref="namedjdbcTemplate"></property>
	</bean>
	<bean id="MANAGE_ROLEService" class="com.manage.platform.service.impl.MANAGE_ROLEServiceImpl">
		<property name="manage_ROLEdao" ref="MANAGE_ROLEDAO"></property>
	</bean>
	<bean id="MANAGE_ROLEAction" class="com.manage.platform.action.MANAGE_ROLEAction">
		<property name="imanage_ROLEservice" ref="MANAGE_ROLEService"></property>
	</bean>

	<!-- 菜单 -->
	<bean id="MANAGE_MODELDAO" class="com.manage.platform.dao.impl.MANAGE_MODELDaoImpl">
		<property name="namedjdbcTemplate" ref="namedjdbcTemplate"></property>
	</bean>
	<bean id="MANAGE_MODELService"
		class="com.manage.platform.service.impl.MANAGE_MODELServiceImpl">
		<property name="MANAGE_MODELdao" ref="MANAGE_MODELDAO"></property>
	</bean>
	<bean id="MANAGE_MODELAction" class="com.manage.platform.action.MANAGE_MODELAction">
		<property name="manage_modelService" ref="MANAGE_MODELService"></property>
	</bean>


	<bean id="MANAGE_AREADAO" class="com.manage.platform.dao.impl.MANAGE_AREADaoImpl">
		<property name="namedjdbcTemplate" ref="namedjdbcTemplate"></property>
	</bean>
	<bean id="MANAGE_AREAService" class="com.manage.platform.service.impl.MANAGE_AREAServiceImpl">
		<property name="MANAGE_AREAdao" ref="MANAGE_AREADAO"></property>
	</bean>
	<bean id="MANAGE_AREAAction" class="com.manage.platform.action.MANAGE_AREAAction">
		<property name="imanage_areaservice" ref="MANAGE_AREAService"></property>
	</bean>


	<bean id="MANAGE_USERDAO" class="com.manage.platform.dao.impl.MANAGE_USERDaoImpl">
		<property name="namedjdbcTemplate" ref="namedjdbcTemplate"></property>
	</bean>
	<bean id="MANAGE_USERService" class="com.manage.platform.service.impl.MANAGE_USERServiceImpl">
		<property name="manage_userdao" ref="MANAGE_USERDAO"></property>
	</bean>
	<bean id="MANAGE_USERAction" class="com.manage.platform.action.MANAGE_USERAction">
		<property name="imanage_userservice" ref="MANAGE_USERService"></property>
		<property name="imanage_areaservice" ref="MANAGE_AREAService"></property>
	</bean>

	<!-- struts报表测试 -->
	<bean id="TestStrutsDao" class="com.manage.report.dao.impl.TestStrutsDaoImpl">
		<property name="namedjdbcTemplate" ref="namedjdbcTemplate"></property>
	</bean>
	<bean id="TestStrutsAction" class="com.manage.report.action.TestStrutsAction">
		<property name="testStrutsDao" ref="TestStrutsDao"></property>
	</bean>




	<bean id="MANAGE_REPORTDao" class="com.manage.report.dao.impl.MANAGE_REPORTDaoImpl">
		<property name="jdbcTemplate" ref="jdbcTemplate"></property>
		<property name="namedjdbcTemplate" ref="namedjdbcTemplate"></property>
	</bean>




	<bean id="SendAmountAction" class="com.manage.report.action.SendAmountAction">
		<property name="imanage_reportdao" ref="MANAGE_REPORTDao"></property>
	</bean>
	<bean id="SendCityAction" class="com.manage.report.action.SendCityAction">
		<property name="imanage_reportdao" ref="MANAGE_REPORTDao"></property>
	</bean>
	<bean id="AddGoodsAction" class="com.manage.data.action.AddGoodsAction">
		<property name="imanage_reportdao" ref="MANAGE_REPORTDao"></property>
	</bean>




















	<!--[redis-JedisPoolConfig配置](http://blog.csdn.net/liang_love_java/article/details/50510753) -->
	<!-- jedis-2.7.2.jar 依赖jar包 commons-pool2-2.3.jar jedis基于 commons-pool2-2.3.jar 
		自己实现了一个资源池。 配置参数 详见 http://blog.csdn.net/liang_love_java/article/details/50510753 -->



	<!-- <bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig"> 
		<property name="maxIdle" value="1" /> <property name="maxTotal" value="5" 
		/> <property name="blockWhenExhausted" value="true" /> <property name="maxWaitMillis" 
		value="30000" /> <property name="testOnBorrow" value="true" /> </bean> <bean 
		id="jedisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory"> 
		<property name="hostName" value="127.0.0.1" /> <property name="port" value="6379"/> 
		<property name="poolConfig" ref="jedisPoolConfig" /> <property name="usePool" 
		value="true"/> </bean> <bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate"> 
		<property name="connectionFactory" ref="jedisConnectionFactory" /> <property 
		name="keySerializer"> <bean class="org.springframework.data.redis.serializer.StringRedisSerializer" 
		/> </property> <property name="valueSerializer"> <bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer" 
		/> </property> <property name="hashKeySerializer"> <bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/> 
		</property> <property name="hashValueSerializer"> <bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer"/> 
		</property> </bean> -->

	<!-- <bean id="sessionFilter" class="com.manage.platform.SessionFilter"> 
		<property name="redisTemplate" ref="redisTemplate"/> </bean> -->


</beans>